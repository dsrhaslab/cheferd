// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.controllers_grpc_interface";
option java_outer_classname = "controllers_grpc_interfaceProto";
option objc_class_prefix = "HLW";

package controllers_grpc_interface;

service GlobalToLocal{
  rpc LocalHandshake (LocalSimplifiedHandshakeRaw) returns (ACK) {}
  rpc StageHandshake (ControlOperation) returns (StageSimplifiedHandshakeRaw) {}
  rpc MarkStageReady (StageReadyRaw) returns (ACK) {}
  rpc CreateEnforcementRule (EnforcementRules) returns (ACK) {}
  rpc CollectGlobalStatistics (ControlOperation) returns (StatsGlobalMap) {}
  rpc CollectGlobalStatisticsAggregated (ControlOperation) returns (StatsGlobalMap) {}
}

message LocalSimplifiedHandshakeRaw {
  repeated string rules = 1;
}

message ControlOperation {
  int32 m_operation_id = 1; // ControlReceive identifier.
  int32 m_operation_type = 2; // Control Plane operation type (CREATE_HSK_RULE, CREATE_ENF_RULE,
  // COLLECT_STATS, ...).
  int32 m_operation_subtype = 3; // Control Plane operation subtype (HSK_CREATE_UNIT,
  // HSK_CREATE_CHANNEL, HSK_CREATE_OBJECT, ...).
  int32 m_size = 4; // Size of the RAW object to receive.
};

message StageSimplifiedHandshakeRaw {
  string m_stage_name = 1;
  string m_stage_env = 2;
  int32 m_pid = 3;
  int32 m_ppid = 4;
  string m_hostname = 5;
  string m_user = 6;
}

message StageReadyRaw {
  bool m_mark_stage = 1;
  string stage_name_env = 2;
}

message ACK {
  int32 m_message = 1;
}

message EnforcementRules {
  //<operation, ...>
  map<string, EnforcementOpRules> operation_rules = 1;
}

message EnforcementOpRules {
  int64 m_rule_id = 1;
  string m_stage_name = 2;
  map<int64, int64> env_rates = 3;
}

message StatsGlobalMap {
  map<string, StatsGlobal > gl_stats = 1;
};

message StatsGlobal {
  double m_metadata_total_rate = 8;
};

//////

service LocalToGlobal{
  rpc ConnectLocalToGlobal (ConnectRequest) returns (ConnectReply) {}
  rpc ConnectStageToGlobal (StageInfoConnect) returns (ConnectReply) {}
  rpc DisconnectStageToGlobal (StageInfoConnect) returns (ConnectReply) {}
}

message ConnectRequest {
  string user_address = 1;
}

message StageInfoConnect {
  string local_address = 1;
  string stage_name = 2;
  string stage_env = 3;
  string stage_user = 4;
}

message ConnectReply {
  string message = 1;
}











